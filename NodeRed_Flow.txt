[
  {
    "id": "waterwise_main_flow",
    "type": "tab",
    "label": "WaterWise - Sistema Principal",
    "disabled": false,
    "info": "Sistema integrado de monitoramento para preven√ß√£o de enchentes"
  },
  {
    "id": "mqtt_broker_config",
    "type": "mqtt-broker",
    "name": "WaterWise MQTT Broker",
    "broker": "broker.hivemq.com",
    "port": "1883",
    "clientid": "NodeRED_WaterWise_Gateway",
    "usetls": false,
    "protocolVersion": "4",
    "keepalive": "60",
    "cleansession": true,
    "birthTopic": "waterwise/gateway/status",
    "birthQos": "1",
    "birthPayload": "online",
    "birthMsg": {},
    "closeTopic": "waterwise/gateway/status", 
    "closeQos": "1",
    "closePayload": "offline",
    "closeMsg": {},
    "willTopic": "",
    "willQos": "0",
    "willPayload": "",
    "willMsg": {},
    "sessionExpiry": ""
  },
  {
    "id": "sensor1_data_input",
    "type": "mqtt in",
    "z": "waterwise_main_flow",
    "name": "Sensor Umidade - Input",
    "topic": "waterwise/sensor1/dados_completos",
    "qos": "1",
    "datatype": "json",
    "broker": "mqtt_broker_config",
    "nl": false,
    "rap": true,
    "rh": 0,
    "x": 180,
    "y": 100,
    "wires": [["sensor1_processor"]]
  },
  {
    "id": "sensor1_processor",
    "type": "function",
    "z": "waterwise_main_flow",
    "name": "Processar Dados Sensor 1",
    "func": "// Processamento dos dados do sensor de umidade\nvar dados = msg.payload;\n\n// Validar estrutura dos dados\nif (!dados.sensor_id || !dados.dados) {\n    node.warn(\"Dados inv√°lidos recebidos do Sensor 1\");\n    return null;\n}\n\n// Extrair informa√ß√µes principais\nvar processedData = {\n    sensor_id: dados.sensor_id,\n    timestamp: dados.timestamp || Date.now(),\n    location: dados.location,\n    temperatura: dados.dados.temperatura,\n    umidade_ar: dados.dados.umidade_ar,\n    umidade_solo: dados.dados.umidade_solo,\n    nivel_agua: dados.dados.nivel_agua,\n    status_solo: dados.alertas?.status_solo || \"DESCONHECIDO\",\n    risco_enchente: dados.alertas?.risco_enchente || false\n};\n\n// Adicionar classifica√ß√£o de risco\nif (processedData.umidade_solo < 30) {\n    processedData.classificacao_risco = \"ALTO\";\n    processedData.cor_dashboard = \"red\";\n} else if (processedData.umidade_solo < 60) {\n    processedData.classificacao_risco = \"MODERADO\";\n    processedData.cor_dashboard = \"yellow\";\n} else {\n    processedData.classificacao_risco = \"BAIXO\";\n    processedData.cor_dashboard = \"green\";\n}\n\n// Calcular √≠ndice de absor√ß√£o\nprocessedData.indice_absorcao = Math.min(100, processedData.umidade_solo * 1.2);\n\n// Preparar para m√∫ltiplas sa√≠das\nmsg.payload = processedData;\nreturn [\n    msg,  // Para dashboard\n    {payload: processedData, topic: \"thingspeak/sensor1\"}, // Para ThingSpeak\n    processedData.risco_enchente ? {payload: processedData, topic: \"alertas/sensor1\"} : null // Para alertas\n];",
    "outputs": 3,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 420,
    "y": 100,
    "wires": [
      ["dashboard_umidade"],
      ["thingspeak_sender"],
      ["alert_processor"]
    ]
  },
  {
    "id": "sensor2_data_input",
    "type": "mqtt in",
    "z": "waterwise_main_flow",
    "name": "Sensor Chuva - Input",
    "topic": "waterwise/sensor2/dados_completos",
    "qos": "1",
    "datatype": "json",
    "broker": "mqtt_broker_config",
    "nl": false,
    "rap": true,
    "rh": 0,
    "x": 180,
    "y": 200,
    "wires": [["sensor2_processor"]]
  },
  {
    "id": "sensor2_processor",
    "type": "function",
    "z": "waterwise_main_flow",
    "name": "Processar Dados Sensor 2",
    "func": "// Processamento dos dados do sensor pluviom√©trico\nvar dados = msg.payload;\n\nif (!dados.sensor_id || !dados.dados) {\n    node.warn(\"Dados inv√°lidos recebidos do Sensor 2\");\n    return null;\n}\n\nvar processedData = {\n    sensor_id: dados.sensor_id,\n    timestamp: dados.timestamp || Date.now(),\n    location: dados.location,\n    chuva_detectada: dados.dados.chuva_detectada,\n    intensidade_mm_h: dados.dados.intensidade_mm_por_hora,\n    volume_acumulado: dados.dados.volume_acumulado_mm,\n    classificacao: dados.dados.classificacao,\n    total_basculas: dados.dados.total_basculas,\n    nivel_alerta: dados.alertas?.nivel || \"NORMAL\"\n};\n\n// Classifica√ß√£o de cores para dashboard\nswitch(processedData.nivel_alerta) {\n    case \"EMERGENCIA\":\n        processedData.cor_dashboard = \"red\";\n        processedData.icone = \"‚ö†Ô∏è\";\n        break;\n    case \"ATENCAO\":\n        processedData.cor_dashboard = \"orange\";\n        processedData.icone = \"üåßÔ∏è\";\n        break;\n    default:\n        processedData.cor_dashboard = \"blue\";\n        processedData.icone = \"‚òÅÔ∏è\";\n}\n\n// Calcular tend√™ncia de chuva\nvar ctx = context.get('historico_chuva') || [];\nctx.push({intensidade: processedData.intensidade_mm_h, timestamp: Date.now()});\nif (ctx.length > 10) ctx.shift(); // Manter apenas √∫ltimas 10 leituras\ncontext.set('historico_chuva', ctx);\n\n// Calcular tend√™ncia\nif (ctx.length >= 3) {\n    var tendencia = 0;\n    for (var i = 1; i < ctx.length; i++) {\n        tendencia += ctx[i].intensidade - ctx[i-1].intensidade;\n    }\n    processedData.tendencia = tendencia > 0 ? \"AUMENTANDO\" : tendencia < 0 ? \"DIMINUINDO\" : \"ESTAVEL\";\n} else {\n    processedData.tendencia = \"INSUFICIENTE\";\n}\n\nmsg.payload = processedData;\nreturn [\n    msg,\n    {payload: processedData, topic: \"thingspeak/sensor2\"},\n    processedData.nivel_alerta === \"EMERGENCIA\" ? {payload: processedData, topic: \"alertas/sensor2\"} : null\n];",
    "outputs": 3,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 420,
    "y": 200,
    "wires": [
      ["dashboard_chuva"],
      ["thingspeak_sender"],
      ["alert_processor"]
    ]
  },
  {
    "id": "sensor3_data_input",
    "type": "mqtt in",
    "z": "waterwise_main_flow",
    "name": "Sensor Reservat√≥rio - Input",
    "topic": "waterwise/sensor3/dados_completos",
    "qos": "1",
    "datatype": "json",
    "broker": "mqtt_broker_config",
    "nl": false,
    "rap": true,
    "rh": 0,
    "x": 180,
    "y": 300,
    "wires": [["sensor3_processor"]]
  },
  {
    "id": "sensor3_processor",
    "type": "function",
    "z": "waterwise_main_flow",
    "name": "Processar Dados Sensor 3",
    "func": "// Processamento dos dados do sensor de reservat√≥rio\nvar dados = msg.payload;\n\nif (!dados.sensor_id || !dados.dados) {\n    node.warn(\"Dados inv√°lidos recebidos do Sensor 3\");\n    return null;\n}\n\nvar processedData = {\n    sensor_id: dados.sensor_id,\n    timestamp: dados.timestamp || Date.now(),\n    location: dados.location,\n    percentual_nivel: dados.dados.percentual_nivel,\n    volume_atual: dados.dados.volume_atual_litros,\n    capacidade_total: dados.dados.capacidade_total,\n    fluxo_atual: dados.dados.fluxo_atual_l_min,\n    status_reservatorio: dados.status?.reservatorio || \"DESCONHECIDO\",\n    nivel_alerta: dados.status?.nivel_alerta || \"NORMAL\",\n    bomba_status: dados.atuadores?.bomba || \"DESLIGADA\",\n    valvula_status: dados.atuadores?.valvula || \"FECHADA\",\n    capacidade_extra: dados.prevencao_enchente?.capacidade_extra_disponivel || 0\n};\n\n// Definir cores baseadas no n√≠vel\nif (processedData.percentual_nivel < 20) {\n    processedData.cor_dashboard = \"red\";\n    processedData.icone = \"üî¥\";\n} else if (processedData.percentual_nivel < 40) {\n    processedData.cor_dashboard = \"orange\";\n    processedData.icone = \"üü°\";\n} else if (processedData.percentual_nivel > 90) {\n    processedData.cor_dashboard = \"red\";\n    processedData.icone = \"üî¥\";\n} else {\n    processedData.cor_dashboard = \"green\";\n    processedData.icone = \"üü¢\";\n}\n\n// Calcular efici√™ncia do sistema\nprocessedData.eficiencia_sistema = Math.round(\n    (processedData.volume_atual / processedData.capacidade_total) * 100\n);\n\nmsg.payload = processedData;\nreturn [\n    msg,\n    {payload: processedData, topic: \"thingspeak/sensor3\"},\n    processedData.nivel_alerta === \"EMERGENCIA\" ? {payload: processedData, topic: \"alertas/sensor3\"} : null\n];",
    "outputs": 3,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 420,
    "y": 300,
    "wires": [
      ["dashboard_reservatorio"],
      ["thingspeak_sender"],
      ["alert_processor"]
    ]
  },
  {
    "id": "analytics_engine",
    "type": "function",
    "z": "waterwise_main_flow",
    "name": "Motor de An√°lise Integrada",
    "func": "// Motor de an√°lise que correlaciona dados de todos os sensores\nvar sensor1_data = context.get('sensor1_ultimo') || {};\nvar sensor2_data = context.get('sensor2_ultimo') || {};\nvar sensor3_data = context.get('sensor3_ultimo') || {};\n\n// Identificar qual sensor enviou os dados\nvar payload = msg.payload;\nif (payload.sensor_id === \"SENSOR_001\") {\n    context.set('sensor1_ultimo', payload);\n    sensor1_data = payload;\n} else if (payload.sensor_id === \"SENSOR_002\") {\n    context.set('sensor2_ultimo', payload);\n    sensor2_data = payload;\n} else if (payload.sensor_id === \"SENSOR_003\") {\n    context.set('sensor3_ultimo', payload);\n    sensor3_data = payload;\n}\n\n// An√°lise integrada apenas se tivermos dados de todos os sensores\nif (!sensor1_data.sensor_id || !sensor2_data.sensor_id || !sensor3_data.sensor_id) {\n    return null; // Aguardar dados de todos os sensores\n}\n\n// Calcular √≠ndice de risco de enchente integrado\nvar risco_solo = sensor1_data.umidade_solo < 30 ? 0.4 : 0.1;\nvar risco_chuva = sensor2_data.intensidade_mm_h > 25 ? 0.5 : sensor2_data.intensidade_mm_h > 10 ? 0.3 : 0.1;\nvar risco_reservatorio = sensor3_data.percentual_nivel > 85 ? 0.3 : 0.1;\n\nvar indice_risco_geral = (risco_solo + risco_chuva + risco_reservatorio) * 100;\n\n// Classificar n√≠vel de risco\nvar nivel_risco_sistema;\nif (indice_risco_geral > 80) {\n    nivel_risco_sistema = \"CRITICO\";\n} else if (indice_risco_geral > 60) {\n    nivel_risco_sistema = \"ALTO\";\n} else if (indice_risco_geral > 40) {\n    nivel_risco_sistema = \"MODERADO\";\n} else {\n    nivel_risco_sistema = \"BAIXO\";\n}\n\n// Gerar recomenda√ß√µes autom√°ticas\nvar recomendacoes = [];\nif (sensor1_data.umidade_solo < 30) {\n    recomendacoes.push(\"Implementar irriga√ß√£o para melhorar absor√ß√£o do solo\");\n}\nif (sensor2_data.intensidade_mm_h > 50) {\n    recomendacoes.push(\"Ativar sistema de drenagem urbana\");\n    recomendacoes.push(\"Alertar popula√ß√£o sobre risco de enchente\");\n}\nif (sensor3_data.percentual_nivel > 90) {\n    recomendacoes.push(\"Abrir v√°lvulas de seguran√ßa do reservat√≥rio\");\n} else if (sensor3_data.percentual_nivel < 20) {\n    recomendacoes.push(\"Ativar bomba de enchimento do reservat√≥rio\");\n}\n\n// Previs√£o de tempo at√© satura√ß√£o\nvar tempo_saturacao = -1;\nif (sensor2_data.intensidade_mm_h > 0 && sensor1_data.umidade_solo < 80) {\n    var capacidade_restante = (80 - sensor1_data.umidade_solo) * 2; // Estimativa em mm\n    tempo_saturacao = capacidade_restante / (sensor2_data.intensidade_mm_h / 60); // Em minutos\n}\n\nvar analise_integrada = {\n    timestamp: Date.now(),\n    indice_risco_geral: Math.round(indice_risco_geral),\n    nivel_risco_sistema: nivel_risco_sistema,\n    componentes_risco: {\n        solo: Math.round(risco_solo * 100),\n        chuva: Math.round(risco_chuva * 100),\n        reservatorio: Math.round(risco_reservatorio * 100)\n    },\n    dados_atuais: {\n        umidade_solo: sensor1_data.umidade_solo,\n        intensidade_chuva: sensor2_data.intensidade_mm_h,\n        nivel_reservatorio: sensor3_data.percentual_nivel\n    },\n    previsoes: {\n        tempo_saturacao_minutos: tempo_saturacao,\n        capacidade_absorcao_restante: Math.max(0, (80 - sensor1_data.umidade_solo) * 2)\n    },\n    recomendacoes: recomendacoes,\n    status_geral: nivel_risco_sistema,
    ultima_atualizacao: new Date().toISOString()
};

// Enviar an√°lise para dashboard principal
msg.payload = analise_integrada;
return [
    msg, // Para dashboard principal
    nivel_risco_sistema === "CRITICO" ? {payload: analise_integrada, topic: "alertas/sistema"} : null // Para alertas cr√≠ticos
];",
    "outputs": 2,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 680,
    "y": 200,
    "wires": [
      ["dashboard_principal"],
      ["alert_processor"]
    ]
  },
  {
    "id": "dashboard_umidade",
    "type": "ui_gauge",
    "z": "waterwise_main_flow",
    "name": "Umidade do Solo",
    "group": "grupo_sensores",
    "order": 1,
    "width": 0,
    "height": 0,
    "gtype": "gage",
    "title": "Umidade do Solo (%)",
    "label": "%",
    "format": "{{value}}",
    "min": 0,
    "max": 100,
    "colors": ["#ca3838","#e6e600","#00b500"],
    "seg1": 30,
    "seg2": 70,
    "x": 680,
    "y": 60,
    "wires": []
  },
  {
    "id": "dashboard_chuva",
    "type": "ui_chart",
    "z": "waterwise_main_flow",
    "name": "Intensidade de Chuva",
    "group": "grupo_sensores",
    "order": 2,
    "width": 0,
    "height": 0,
    "label": "Chuva (mm/h)",
    "chartType": "line",
    "legend": "false",
    "xformat": "HH:mm:ss",
    "interpolate": "linear",
    "nodata": "Sem dados",
    "dot": false,
    "ymin": "0",
    "ymax": "100",
    "removeOlder": 1,
    "removeOlderPoints": "",
    "removeOlderUnit": "3600",
    "cutout": 0,
    "useOneColor": false,
    "useUTC": false,
    "colors": ["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],
    "outputs": 1,
    "x": 680,
    "y": 140,
    "wires": [[]]
  },
  {
    "id": "dashboard_reservatorio",
    "type": "ui_gauge",
    "z": "waterwise_main_flow",
    "name": "N√≠vel Reservat√≥rio",
    "group": "grupo_sensores",
    "order": 3,
    "width": 0,
    "height": 0,
    "gtype": "donut",
    "title": "Reservat√≥rio (%)",
    "label": "%",
    "format": "{{value}}",
    "min": 0,
    "max": 100,
    "colors": ["#ca3838","#e6e600","#00b500"],
    "seg1": 25,
    "seg2": 75,
    "x": 680,
    "y": 220,
    "wires": []
  },
  {
    "id": "dashboard_principal",
    "type": "ui_template",
    "z": "waterwise_main_flow",
    "group": "grupo_principal",
    "name": "Dashboard Principal WaterWise",
    "order": 1,
    "width": 0,
    "height": 0,
    "format": "<div style=\"padding: 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 10px; color: white;\">\n    <h2 style=\"text-align: center; margin-bottom: 20px;\">üåä WaterWise - Sistema Integrado</h2>\n    \n    <div style=\"display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 15px; margin-bottom: 20px;\">\n        <div style=\"background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px; text-align: center;\">\n            <h3>üå± Status do Solo</h3>\n            <div style=\"font-size: 24px; font-weight: bold;\">{{msg.payload.dados_atuais.umidade_solo}}%</div>\n            <div style=\"font-size: 12px; opacity: 0.8;\">Umidade</div>\n        </div>\n        \n        <div style=\"background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px; text-align: center;\">\n            <h3>üåßÔ∏è Intensidade Chuva</h3>\n            <div style=\"font-size: 24px; font-weight: bold;\">{{msg.payload.dados_atuais.intensidade_chuva}}</div>\n            <div style=\"font-size: 12px; opacity: 0.8;\">mm/h</div>\n        </div>\n        \n        <div style=\"background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px; text-align: center;\">\n            <h3>üèóÔ∏è Reservat√≥rio</h3>\n            <div style=\"font-size: 24px; font-weight: bold;\">{{msg.payload.dados_atuais.nivel_reservatorio}}%</div>\n            <div style=\"font-size: 12px; opacity: 0.8;\">Capacidade</div>\n        </div>\n    </div>\n    \n    <div style=\"background: rgba(0,0,0,0.2); padding: 20px; border-radius: 8px; margin-bottom: 15px;\">\n        <h3 style=\"margin-top: 0;\">üìä An√°lise de Risco Integrada</h3>\n        <div style=\"display: flex; justify-content: space-between; align-items: center;\">\n            <div>\n                <div style=\"font-size: 28px; font-weight: bold; color: {{msg.payload.nivel_risco_sistema === 'CRITICO' ? '#ff4444' : msg.payload.nivel_risco_sistema === 'ALTO' ? '#ff8800' : '#44ff44'}};\">{{msg.payload.nivel_risco_sistema}}</div>\n                <div style=\"font-size: 14px; opacity: 0.8;\">N√≠vel de Risco</div>\n            </div>\n            <div style=\"text-align: right;\">\n                <div style=\"font-size: 24px; font-weight: bold;\">{{msg.payload.indice_risco_geral}}%</div>\n                <div style=\"font-size: 12px; opacity: 0.8;\">√çndice Geral</div>\n            </div>\n        </div>\n    </div>\n    \n    <div style=\"background: rgba(0,0,0,0.2); padding: 15px; border-radius: 8px;\">\n        <h4 style=\"margin-top: 0;\">üéØ Recomenda√ß√µes Autom√°ticas:</h4>\n        <ul style=\"margin: 0; padding-left: 20px;\">\n            <li ng-repeat=\"rec in msg.payload.recomendacoes\">{{rec}}</li>\n        </ul>\n    </div>\n    \n    <div style=\"text-align: center; margin-top: 15px; font-size: 12px; opacity: 0.7;\">\n        √öltima atualiza√ß√£o: {{msg.payload.ultima_atualizacao}}\n    </div>\n</div>",
    "storeOutMessages": true,
    "fwdInMessages": true,
    "resendOnRefresh": true,
    "templateScope": "local",
    "x": 920,
    "y": 200,
    "wires": [[]]
  },
  {
    "id": "alert_processor",
    "type": "function",
    "z": "waterwise_main_flow",
    "name": "Processador de Alertas",
    "func": "// Processador central de alertas do sistema WaterWise\nvar alertData = msg.payload;\nvar alertType = \"GENERICO\";\nvar severity = \"INFO\";\nvar message = \"\";\nvar actions = [];\n\n// Determinar tipo de alerta baseado no sensor ou sistema\nif (alertData.sensor_id === \"SENSOR_001\") {\n    alertType = \"SOLO_CRITICO\";\n    severity = \"WARNING\";\n    message = `Solo com umidade cr√≠tica: ${alertData.umidade_solo}%`;\n    actions = [\"Ativar irriga√ß√£o\", \"Monitorar absor√ß√£o\"];\n    \n} else if (alertData.sensor_id === \"SENSOR_002\") {\n    alertType = \"CHUVA_INTENSA\";\n    severity = alertData.nivel_alerta === \"EMERGENCIA\" ? \"CRITICAL\" : \"WARNING\";\n    message = `Chuva intensa detectada: ${alertData.intensidade_mm_h} mm/h`;\n    actions = [\"Alertar popula√ß√£o\", \"Ativar drenagem urbana\"];\n    \n} else if (alertData.sensor_id === \"SENSOR_003\") {\n    alertType = \"RESERVATORIO_CRITICO\";\n    severity = \"CRITICAL\";\n    message = `Reservat√≥rio em n√≠vel cr√≠tico: ${alertData.percentual_nivel}%`;\n    actions = alertData.percentual_nivel < 25 ? [\"Ativar bomba\"] : [\"Abrir v√°lvulas\"];\n    \n} else if (alertData.nivel_risco_sistema) {\n    alertType = \"SISTEMA_INTEGRADO\";\n    severity = alertData.nivel_risco_sistema === \"CRITICO\" ? \"CRITICAL\" : \"WARNING\";\n    message = `Risco de enchente ${alertData.nivel_risco_sistema.toLowerCase()}: ${alertData.indice_risco_geral}%`;\n    actions = alertData.recomendacoes || [];\n}\n\n// Criar estrutura padronizada do alerta\nvar processedAlert = {\n    id: `ALERT_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n    timestamp: new Date().toISOString(),\n    type: alertType,\n    severity: severity,\n    source: alertData.sensor_id || \"SISTEMA\",\n    location: alertData.location?.nome || \"Mairipor√£ - SP\",\n    message: message,\n    data: alertData,\n    actions: actions,\n    status: \"ACTIVE\",\n    auto_resolve: severity !== \"CRITICAL\"\n};\n\n// Log do alerta\nnode.warn(`üö® ALERTA ${severity}: ${message}`);\n\n// Determinar canais de sa√≠da\nvar outputs = [null, null, null, null];\n\n// Dashboard de alertas (sempre)\noutputs[0] = {payload: processedAlert, topic: \"dashboard/alertas\"};\n\n// Email/SMS para alertas cr√≠ticos\nif (severity === \"CRITICAL\") {\n    outputs[1] = {payload: processedAlert, topic: \"notifications/critical\"};\n}\n\n// Webhook para sistema externo\nif (severity === \"CRITICAL\" || alertType === \"SISTEMA_INTEGRADO\") {\n    outputs[2] = {payload: processedAlert, topic: \"webhooks/external_system\"};\n}\n\n// Log hist√≥rico (sempre)\noutputs[3] = {payload: processedAlert, topic: \"database/alert_history\"};\n\nreturn outputs;",
    "outputs": 4,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 920,
    "y": 400,
    "wires": [
      ["dashboard_alertas"],
      ["email_notification"],
      ["webhook_sender"],
      ["database_logger"]
    ]
  },
  {
    "id": "thingspeak_sender",
    "type": "function",
    "z": "waterwise_main_flow",
    "name": "Preparar para ThingSpeak",
    "func": "// Preparar dados para envio ao ThingSpeak\nvar data = msg.payload;\nvar thingspeakData = {};\n\n// Mapear campos baseado no sensor\nif (data.sensor_id === \"SENSOR_001\") {\n    thingspeakData = {\n        field1: data.temperatura || 0,\n        field2: data.umidade_ar || 0,\n        field3: data.umidade_solo || 0,\n        field4: data.nivel_agua || 0,\n        field5: data.classificacao_risco === \"ALTO\" ? 1 : 0\n    };\n} else if (data.sensor_id === \"SENSOR_002\") {\n    thingspeakData = {\n        field1: data.intensidade_mm_h || 0,\n        field2: data.volume_acumulado || 0,\n        field3: data.total_basculas || 0,\n        field4: data.nivel_alerta === \"EMERGENCIA\" ? 1 : 0\n    };\n} else if (data.sensor_id === \"SENSOR_003\") {\n    thingspeakData = {\n        field1: data.percentual_nivel || 0,\n        field2: data.volume_atual || 0,\n        field3: data.fluxo_atual || 0,\n        field4: data.bomba_status === \"LIGADA\" ? 1 : 0,\n        field5: data.valvula_status === \"ABERTA\" ? 1 : 0\n    };\n}\n\n// Adicionar metadata\nthingspeakData.status = \"Dados WaterWise - \" + data.sensor_id;\nthingspeakData.latitude = data.location?.latitude || -23.3149;\nthingspeakData.longitude = data.location?.longitude || -46.5873;\n\nmsg.payload = thingspeakData;\nmsg.topic = \"thingspeak/send\";\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 920,
    "y": 100,
    "wires": [["thingspeak_http"]]
  },
  {
    "id": "thingspeak_http",
    "type": "http request",
    "z": "waterwise_main_flow",
    "name": "Enviar para ThingSpeak",
    "method": "POST",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "https://api.thingspeak.com/update?api_key=SUA_API_KEY_THINGSPEAK",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "x": 1140,
    "y": 100,
    "wires": [[]]
  },
  {
    "id": "dashboard_alertas",
    "type": "ui_table",
    "z": "waterwise_main_flow",
    "group": "grupo_alertas",
    "name": "Tabela de Alertas",
    "order": 1,
    "width": 0,
    "height": 0,
    "columns": [
      {"field": "timestamp", "title": "Hor√°rio", "width": "20%"},
      {"field": "type", "title": "Tipo", "width": "20%"},
      {"field": "severity", "title": "Gravidade", "width": "15%"},
      {"field": "message", "title": "Mensagem", "width": "35%"},
      {"field": "status", "title": "Status", "width": "10%"}
    ],
    "outputs": 0,
    "cts": false,
    "x": 1140,
    "y": 360,
    "wires": []
  },
  {
    "id": "email_notification",
    "type": "e-mail",
    "z": "waterwise_main_flow",
    "server": "smtp.gmail.com",
    "port": "465",
    "secure": true,
    "tls": true,
    "name": "Notifica√ß√£o por Email",
    "dname": "WaterWise Alert System",
    "x": 1140,
    "y": 400,
    "wires": []
  },
  {
    "id": "webhook_sender",
    "type": "http request",
    "z": "waterwise_main_flow",
    "name": "Webhook Sistema Externo",
    "method": "POST",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "https://webhook.site/SEU_WEBHOOK_URL",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "x": 1140,
    "y": 440,
    "wires": [[]]
  },
  {
    "id": "database_logger",
    "type": "function",
    "z": "waterwise_main_flow",
    "name": "Logger Banco de Dados",
    "func": "// Preparar dados para armazenamento em banco\nvar logData = {\n    timestamp: new Date().toISOString(),\n    alert_id: msg.payload.id,\n    type: msg.payload.type,\n    severity: msg.payload.severity,\n    source: msg.payload.source,\n    location: msg.payload.location,\n    message: msg.payload.message,\n    data: JSON.stringify(msg.payload.data),\n    actions: JSON.stringify(msg.payload.actions),\n    status: msg.payload.status\n};\n\n// Log para console (em produ√ß√£o, conectar ao banco de dados)\nconsole.log(\"[WATERWISE DB LOG]\", logData);\n\nmsg.payload = logData;\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1140,
    "y": 480,
    "wires": [[]]
  },
  {
    "id": "grupo_sensores",
    "type": "ui_group",
    "name": "Sensores Individuais",
    "tab": "tab_waterwise",
    "order": 1,
    "disp": true,
    "width": "12",
    "collapse": false
  },
  {
    "id": "grupo_principal",
    "type": "ui_group",
    "name": "Dashboard Principal",
    "tab": "tab_waterwise",
    "order": 2,
    "disp": true,
    "width": "12",
    "collapse": false
  },
  {
    "id": "grupo_alertas",
    "type": "ui_group",
    "name": "Sistema de Alertas",
    "tab": "tab_waterwise",
    "order": 3,
    "disp": true,
    "width": "12",
    "collapse": false
  },
  {
    "id": "tab_waterwise",
    "type": "ui_tab",
    "name": "WaterWise - Monitoramento",
    "icon": "dashboard",
    "disabled": false,
    "hidden": false
  }
]